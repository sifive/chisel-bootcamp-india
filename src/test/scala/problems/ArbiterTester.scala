
package problems

import java.io.File

import chisel3._
import chisel3.util._
import org.scalatest.{Matchers, FlatSpec}
import chisel3.iotesters.{ChiselFlatSpec, Driver, PeekPokeTester, TesterOptionsManager, SteppedHWIOTester}

class ArbiterTester(c: Arbiter) extends PeekPokeTester(c) {
  import scala.util.Random
  val data = Random.nextInt(65536)
  poke(c.io.fifo_data, data)
  
  for (i <- 0 until 8) {
    poke(c.io.fifo_valid, (i>>0)%2)
    poke(c.io.pe0_ready,  (i>>1)%2)
    poke(c.io.pe1_ready,  (i>>2)%2)

    expect(c.io.fifo_ready, i>1)
    expect(c.io.pe0_valid,  i==3 || i==7)
    expect(c.io.pe1_valid,  i==5)
    
    if (i == 3 || i ==7) {
      expect(c.io.pe0_data, data)
    } else if (i == 5) {
      expect(c.io.pe1_data, data)
    }
  }
}

// testOnly problems.ArbiterTests
class ArbiterTests extends ChiselFlatSpec {
  behavior of "Module Tests "
  backends foreach {backend =>
    it should s"correctly respond to inputs in $backend" in {
      Driver(() => new Arbiter, backend)(c => new ArbiterTester(c)) should be (true)
    }
  }
}                                                                                                                                    

// testOnly problems.ArbiterVerilatorTester
class ArbiterVerilatorTester extends FlatSpec with Matchers {
  behavior of "Arbiter"
  it should "run verilator via command line arguments" in {
    // val args = Array.empty[String]
    val args = Array("--backend-name", "verilator", "--target-dir", "test_run_dir/Arbiter")
    iotesters.Driver.execute(args, () => new Arbiter) { c =>
      new ArbiterTester(c)
    } should be(true)
  }
}

// testOnly problems.ArbiterFirrtlTester
class ArbiterFirrtlTester extends FlatSpec with Matchers {
  behavior of "Arbiter"
  it should "run firrtl via command line arguments" in {
    // val args = Array.empty[String]
    val args = Array("--backend-name", "firrtl", "--fint-write-vcd", "--target-dir", "test_run_dir/Arbiter")
    iotesters.Driver.execute(args, () => new Arbiter) { c =>
      new ArbiterTester(c)  
    } should be(true)
  }
}

// testOnly problems.ArbiterTreadleTester
class ArbiterTreadleTester extends FlatSpec with Matchers {
  behavior of "Arbiter"
  it should "run treadle via command line arguments" in {
    // val args = Array.empty[String]
    val args = Array("--backend-name", "treadle", "-tiwv", "--target-dir", "test_run_dir/Arbiter")
    iotesters.Driver.execute(args, () => new Arbiter) { c =>
      new ArbiterTester(c)
    } should be(true)
  }
}

// testOnly problems.ArbiterTOMTester
class ArbiterTOMTester extends FlatSpec with Matchers {
  behavior of "Arbiter"

  val manager1 = new TesterOptionsManager {
    testerOptions = testerOptions.copy(backendName = "firrtl")  //https://github.com/freechipsproject/chisel-testers/blob/master/src/main/scala/chisel3/iotesters/TesterOptions.scala
    interpreterOptions = interpreterOptions.copy(writeVCD = true)  //https://github.com/freechipsproject/firrtl-interpreter/blob/master/src/main/scala/firrtl_interpreter/Driver.scala
  }
  val manager2 = new TesterOptionsManager {
    // VCD is generated by default is written in test_run_dir/<test_name>/<module_name>.vcd
    testerOptions = testerOptions.copy(backendName = "verilator")
  }
  val manager3 = new TesterOptionsManager {
    // VCD is generated by default is written in test_run_dir/<test_name>/<module_name>.vcd
    testerOptions = testerOptions.copy(backendName = "treadle")
    interpreterOptions = interpreterOptions.copy(writeVCD = true)
  }
  it should "check Arbiter Module " in {
    //implicit val sodor_conf = SodorConfiguration()
    chisel3.iotesters.Driver.execute(() => new Arbiter,manager1) ( c => // manager1 or manager2 or manager 3
      new ArbiterTester(c)
    ) should be(true)
  }
}
// test:runMain problems.ArbiterMain
object ArbiterMain extends App{
   
iotesters.Driver.execute(args= Array("--backend-name","verilator")  , ()=> new Arbiter){
 c=> new ArbiterTester(c)
  }
}